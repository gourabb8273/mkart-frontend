name: Deploy Customer Frontend Service
 
on:
  push:
    paths:
      - "/**"   # 
 
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
 
      - name: Set Up Docker
        uses: docker/setup-buildx-action@v2
 
      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: false
          registry-type: private
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.REGION }} # 'ap-south-1' Set AWS Region explicitly
 
      - name: Build and Push User Service Image
        run: |
          IMAGE_URI="${{ secrets.ECR_URI }}/customer-frontend:latest"
          docker build -t $IMAGE_URI ./customer-frontend
          docker push $IMAGE_URI
 
      - name: Update Task Definition
        run: |
          sed -i 's#<IMAGE_URI>#${{ secrets.ECR_URI }}/customer-frontend:latest#g' ./customer-frontend/task-def.json
 
      - name: Attach CloudWatch Logs Permissions to Task Execution Role
        run: |
          aws iam attach-role-policy \
            --role-name ecsTaskExecutionRole \
            --policy-arn arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
      - name: Register Task Definition
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://./task-def.json \
            --region ap-south-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.REGION }} # 'ap-south-1' Set AWS Region explicitly
 
      - name: Check if Service Exists
        id: check-service
        run: |
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster my-microservices \
            --services customer-frontend \
            --query 'services[0].status' \
            --output text --region ap-south-1)
          echo "Service Status: $SERVICE_STATUS"
          if [[ "$SERVICE_STATUS" == "ACTIVE" ]]; then
            echo "Service exists, preparing for update."
            echo "::set-output name=service-exists::true"
          else
            echo "Service does not exist, will create a new one."
            echo "::set-output name=service-exists::false"
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.REGION }}
 
      - name: Create or Update ECS Service with ALB
        run: |
          if [ "${{ steps.check-service.outputs.service-exists }}" == "true" ]; then
            echo "Updating ECS service with ALB..."
            aws ecs update-service \
              --cluster my-microservices \
              --service customer-frontend \
              --task-definition customer-frontend:1 \
              --desired-count 1 \
              --region ap-south-1 \
              --force-new-deployment
          else
            echo "Creating ECS service with ALB..."
            aws ecs create-service \
              --cluster my-microservices \
              --service-name customer-frontend \
              --task-definition customer-frontend:1 \
              --desired-count 1 \
              --launch-type EC2 \
              --load-balancers '[{
                "targetGroupArn": "arn:aws:elasticloadbalancing:ap-south-1:980921736494:targetgroup/ecs-tg/37c661d494e4ce68",
                "containerName": "customer-frontend",
                "containerPort": 3000
              }]' \
              --region ap-south-1 \
              --health-check-grace-period-seconds 60
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.REGION }}
 
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ./customer-frontend/task-def.json
          service: customer-frontend
          cluster: my-microservices
          wait-for-service-stability: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.REGION }}

    # # Deploy API Gateway after ECS Service Deployment
    #   - name: Deploy API Gateway
    #     run: |
    #       aws apigateway create-deployment \
    #         --rest-api-id wc5wr9px90 \
    #         --stage-name dev \
    #         --description "Deploy API after customer-frontend deployment"
    #     env:
    #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #       AWS_REGION: ${{ secrets.REGION }}


    #   #  Flush API gateway Cache
    #   - name: Flush API gateway Cache
    #     run: |
    #       aws apigateway flush-stage-cache \
    #         --rest-api-id wc5wr9px90 \
    #         --stage-name dev

    #     env:
    #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #       AWS_REGION: ${{ secrets.REGION }}